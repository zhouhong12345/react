{"version":3,"sources":["Todolist/Todoinput.js","Todolist/Todoing.js","Todolist/Todolist.js","Request.js","Context/Context.js","Context/Child.js","Context/Parent.js","Hoc/Hoc.js","Project01/TodoInput.js","Project01/ToDoing.js","Project01/TodoList.js","index.js"],"names":["Todoinput","handleInput","e","keyCode","props","addTodo","target","value","handleChange","setState","name","parseInt","state","n1","n2","style","color","this","fontSize","htmlFor","id","onChange","onKeyDown","type","Component","Todoing","a","className","todo","map","item","idx","key","onClick","delete","protoTypes","PropTypes","array","defaultProps","con","React","createContext","Child","console","log","context","contextType","url","hoc","Com","title","A","data","fetch","then","res","json","result","displayName","getDisplayName","Music","Music1","Mymusic","Mymusic1","biaodan","add","InputChange","input","placeholder","ToDoing","JSON","parse","localStorage","getItem","b","i","length","list","push","arr","width","height","backgroundColor","margin","trans","marginTop","float","marginLeft","marginBottom","del","TodoList","addList","setItem","stringify","deleteList","listDel","splice","arrDel","transfer","c","listAdd","arrAdd","number","num","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fa4d7b1b.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\n\r\n//子组件----->父组件传递数据，调用子组件时往子组件传递一个函数\r\n//子组件通过props调用该函数\r\n\r\n//受控组件和非受控组件\r\n\r\n//非受控组件\r\n//代码简单、比较适用于一次性获取表单的值\r\n// export default class Todoinput extends Component{\r\n//     componentDidMount(){\r\n//         //console.log(this.inpp);\r\n//         // console.log(this.inpp.value); \r\n\r\n//         console.log(this);\r\n//     }\r\n//     search=()=>{\r\n//         console.log(this.inpp.value);\r\n//     }\r\n//     render(){\r\n        \r\n//         return (<div>\r\n//             {/* <input ref={(inp)=>this.inpp=inp} type='text'/>  */}\r\n//             <input ref='a' type='text'/> \r\n//             {/* <button onClick={this.search}>查询</button> */}\r\n//             <button ref='b' onClick={this.search}>查询</button>\r\n//         </div>)\r\n//     }\r\n// }\r\n\r\n\r\n\r\n\r\n//受控组件：value值被react的状态控制\r\n//可以方便拿到input框的值、实时获取或处理输入的内容\r\n\r\nexport default class Todoinput extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n        //  val:'todo'\r\n            n1:0,\r\n            n2:0\r\n         }\r\n    }\r\n    handleInput=(e)=>{\r\n        if(e.keyCode===13){\r\n            //console.log(e.keyCode)//回车键值\r\n            this.props.addTodo(e.target.value)\r\n        }\r\n    }\r\n    handleChange=(e)=>{\r\n        this.setState({\r\n            [e.target.name]:parseInt(e.target.value==''?0:e.target.value)\r\n            // val:e.target.value\r\n\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <label style={{\r\n                    color:this.state.n1+this.state.n2>10?'red':'green',fontSize:50\r\n                    }} \r\n                    htmlFor=\"inp\">输入：\r\n                </label>\r\n                <input id='inp' name='n1' onChange={(e)=>this.handleChange(e)} value={this.state.n1} onKeyDown={(e)=>this.handleInput(e)} type='text'/>\r\n                {/* <input name='n1' onChange={this.handleChange} value={this.state.n1} onKeyDown={(e)=>this.handleInput(e)} type='text'/> */}\r\n                +\r\n                <input name='n2' onChange={(e)=>this.handleChange(e)} value={this.state.n2} onKeyDown={(e)=>this.handleInput(e)} type='text'/>\r\n                {/* <input name='n1' onChange={this.handleChange} value={this.state.n1} onKeyDown={(e)=>this.handleInput(e)} type='text'/> */}\r\n                <p>{this.state.n1+this.state.n2}</p>{/*实时在变*/}\r\n                {/* <p dangerouslySetInnerHTML={{__html:this.state.n1+this.state.n2}}></p> */}\r\n                <button>查询</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default class Todoing extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>正在进行{this.props.a}</h1>\r\n\r\n                <ul className='list'>{\r\n                    this.props.todo.map((item,idx)=><li key={idx}>{item}----<button onClick={()=>{this.props.delete(idx)}}>删除</button></li>)\r\n                }\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nTodoing.protoTypes={\r\n    todo:PropTypes.array\r\n}\r\nTodoing.defaultProps={\r\n    todo:[2,3,4],\r\n    a:100\r\n}","import React, { Component } from 'react';\r\nimport Todoinput from './Todoinput';\r\nimport Todoing from './Todoing';\r\nimport { stat } from 'fs';\r\n\r\n\r\nexport default class Todolist extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            todo:[1,2,3]\r\n        }\r\n        // var arr=[1,2,{a:100}];\r\n        //var b=[...arr];//浅拷贝后数组不一样但是引用还是一样的对象a值变为200\r\n        // var b=JSON.parse(JSON.stringify(arr));//深拷贝？？\r\n        // b[2].a=200;\r\n        // console.log(arr);\r\n\r\n        //对象的拷贝\r\n    //     var a={a:100};\r\n    //     //var b={a:200};\r\n    //    // var o=Object.assign(a,b);\r\n    //    //var o=Object.assign({},a,b);//出现{}新的对象\r\n    //     var o=Object.assign({},a);//拷贝对象\r\n    //     console.log(o);\r\n    //     console.log(o===a);\r\n\r\n        // var a={a:100,b:100};\r\n        // Object.keys(a).forEach((item)=>{ //foreach遍历对象\r\n        //     console.log(item);\r\n        //     console.log(a[item]);\r\n        // })\r\n\r\n        // for(var item in a){   //for循环遍历对象,但此方法不太好,尽量不用\r\n        //     console.log(a);\r\n        // }\r\n\r\n\r\n    }\r\n    //数组添加元素\r\n    addItem=(msg)=>{\r\n        //var list=[this.state.todo];\r\n        // this.state.todo.push(msg)\r\n        // console.log(this.state.todo);\r\n\r\n        //区别：用setState会使render改变,而用state只会使数组改变\r\n\r\n        this.setState({\r\n            todo:[...this.state.todo,msg]\r\n        })\r\n        //console.log(list);\r\n        console.log(msg)\r\n    }\r\n    //数组删除元素\r\n    deleteItem=(a)=>{\r\n        //this.state.todo.splice(a,1);不要写\r\n        //深拷贝\\浅拷贝\r\n        //状态(state)\r\n        //1.不要直接改变、处理状态\r\n        var todo=[...this.state.todo];\r\n        todo.splice(a,1);\r\n        //2.setState是异步的\r\n        this.setState(\r\n            {todo:todo}\r\n        )\r\n        //this.setState((state,props)=>({todo:state.todo+1}))\r\n        //this.setState({todo:this.state.todo+1})\r\n        // this.setState({\r\n        //     todo:this.state.todo\r\n        // })\r\n    }\r\n    render() {\r\n        \r\n        return (\r\n            <div>\r\n                <Todoinput addTodo={this.addItem}/>\r\n                <Todoing todo={this.state.todo} delete={this.deleteItem}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport Axios from 'axios';\r\n\r\nexport default class Request extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            data:[]\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        fetch('https://api.apiopen.top/musicRankingsDetails?type=1',{method:'post',body:'{name:111}'})\r\n        .then((res)=>{\r\n            //console.log(res);//打印response对象\r\n            return res.json();\r\n        })\r\n        .then((res)=>{\r\n            this.setState({\r\n                data:res.result\r\n            })\r\n            console.log(res)\r\n        })\r\n\r\n        // Axios.get('https://api.apiopen.top/musicRankingsDetails?type=1').then((res)=>{\r\n        //     console.log(res)\r\n        //     this.setState({\r\n        //         data:res.data.result\r\n        //     })\r\n        // })\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>请求接口</h1>\r\n                <ul>\r\n                    {\r\n                        this.state.data.map(\r\n                            (item,index)=>(\r\n                                <li key={index}>\r\n                                    <h2>{item.album_title}</h2>\r\n                                    <p>{item.author}</p>\r\n                                </li>\r\n                            )\r\n                        )\r\n                    }\r\n                    \r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\n//export const {Provider,Consumer}=React.createContext()\r\nexport const con=React.createContext()\r\n\r\n//export const con2=React.createContext()","import React, { Component } from 'react'\r\n//import {Consumer} from './Context';\r\nimport {con} from './Context';\r\n\r\n\r\nexport default class Child extends Component {\r\n    \r\n    render() {\r\n        console.log(this);\r\n        return (\r\n            <div>\r\n                <h1>Context</h1>\r\n                <div>{this.context}</div>\r\n\r\n                {/* <Consumer>\r\n                    {\r\n                        (data)=><div>{data}</div>\r\n                    }\r\n                </Consumer> */}\r\n            </div>\r\n        )\r\n    }\r\n}\r\nChild.contextType=con;\r\n","import React, { Component } from 'react'\r\nimport Child from './Child';\r\n\r\n\r\nexport default class Parent extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Child/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nlet url='https://api.apiopen.top/musicRankingsDetails?type=1';\r\n\r\n\r\n//高阶组件\r\nfunction hoc(Com,url,title){    //Com参数传的是一个组件（类）\r\n    class A extends Component{\r\n        constructor(){\r\n            super();\r\n            this.state={\r\n                data:[]\r\n            }\r\n        }\r\n        componentDidMount(){\r\n            fetch(url)\r\n            .then((res)=>{\r\n            //console.log(res);//打印response对象\r\n                return res.json();\r\n            })\r\n            .then((res)=>{\r\n                this.setState({\r\n                    data:res.result\r\n                })\r\n            })\r\n        }\r\n        render(){\r\n            return (\r\n                <div>\r\n                    <h1>{title}</h1>\r\n                   <Com {...this.props} data={this.state.data}/>\r\n                </div>\r\n            )\r\n                \r\n        }\r\n    }\r\n    //A.displayName='A('+getDisplayName(Com)+')'//再写个高阶组件会有区别\r\n    A.displayName=`A(${getDisplayName(Com)})`;\r\n    return A;\r\n}\r\nfunction getDisplayName(Com){\r\n    return Com.displayName || Com.name || 'Component';//如果有displayname就返回第一个，没有就返回name\r\n}\r\n\r\nclass Music extends Component{\r\n    render(){\r\n        return <ul>\r\n            <div>{this.props.name}</div>\r\n            {\r\n                this.props.data.map((item,idx)=>{\r\n                    return <li key={idx}>{item.title}</li>\r\n                })\r\n            }\r\n        </ul>\r\n    }\r\n}\r\nclass Music1 extends Component{\r\n    render(){\r\n        return <ul>\r\n            {\r\n                this.props.data.map((item,idx)=>{\r\n                    return <p key={idx}>{item.title}</p>\r\n                })\r\n            }\r\n        </ul>\r\n    }\r\n}\r\n\r\nvar Mymusic=hoc(Music,url,'第一个');//AA\r\n//var Mymusic1=hoc(Music,url);//BB,url可换成别的，接口不一样，组件复用\r\nvar Mymusic1=hoc(Music1,url,'第二个');\r\n\r\nexport default class Hoc extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Mymusic name='aa'/>\r\n                <Mymusic1/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class biaodan extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            input:''\r\n        }\r\n    }\r\n    handleInput=(e)=>{\r\n        if(e.keyCode===13){\r\n            this.props.add(e.target.value)\r\n        }\r\n    }\r\n    InputChange=(e)=>{\r\n        console.log(e.target.value);\r\n        this.setState({\r\n            [e.target.name]:e.target.value\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div> \r\n                    <input className=\"In\" type=\"text\" name='input'  onChange={this.InputChange} value={this.state.input} onKeyDown={this.handleInput} placeholder='添加ToDo'/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class ToDoing extends Component {\r\n    componentWillMount(){\r\n        var a=JSON.parse(localStorage.getItem('key1'));\r\n        var b=JSON.parse(localStorage.getItem('key2'));\r\n        if(a!==null && b!==null){\r\n            console.log(b);\r\n            for(var i=0;i<a.length;i++){\r\n                this.props.list.push(a[i]);\r\n            }\r\n            for(var i=0;i<b.length;i++){\r\n                this.props.arr.push(b[i]);\r\n            }\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div className='d'>\r\n                <div className='done'><h1>正在进行</h1><div className='dtwo'>{this.props.list.length}</div></div>\r\n                <ul className='u'>\r\n                {\r\n                    this.props.list.map((item,idx)=><li key={idx}>\r\n                        <div style={{width:\"400px\",height:'25px',backgroundColor:'rgb(192,192,192)',margin:'3px'}}>\r\n                            <button onClick={()=>{this.props.trans(idx,'list')}} style={{marginTop:'2px',float:'left',width:'20px',height:'20px'}}></button>\r\n                            \r\n                            <p style={{marginLeft:'10px',float:'left',width:'300px',marginBottom:'0px'}}>\r\n                                {item}\r\n                            </p>\r\n                            <button style={{height:'25px',float:'right'}} onClick={()=>{this.props.del(idx,'list')}}>\r\n                                删除\r\n                            </button>\r\n                        </div></li>)\r\n                }\r\n                </ul>\r\n                <div className='done'><h1>已经完成</h1><div className='dtwo'>{this.props.arr.length}</div></div>\r\n                <ul className='u'>\r\n                {\r\n                    this.props.arr.map((item,idx)=><li key={idx}>\r\n                    <div style={{width:\"400px\",height:'25px',backgroundColor:'rgb(192,192,192)',margin:'3px'}}>\r\n                        <button onClick={()=>{this.props.trans(idx,'arr')}} style={{marginTop:'2px',float:'left',width:'20px',height:'20px'}}></button>\r\n                        \r\n                        <p style={{marginLeft:'10px',float:'left',width:'300px',marginBottom:'0px'}}>\r\n                            {item}\r\n                        </p>\r\n                        <button style={{height:'25px',float:'right'}} onClick={()=>{this.props.del(idx,'arr')}}>\r\n                            删除\r\n                        </button>\r\n                    </div></li>)\r\n                }\r\n                </ul>\r\n            </div>      \r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nimport TodoInput from './TodoInput';\r\nimport ToDoing from './ToDoing';\r\n\r\nexport default class TodoList extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            list:[],\r\n            arr:[]\r\n        }\r\n    }\r\n    addList=(e)=>{\r\n        this.setState({\r\n            list:[...this.state.list,e]\r\n        },()=>{\r\n            localStorage.setItem('key1',JSON.stringify(this.state.list));\r\n        })\r\n    }\r\n\r\n    deleteList=(a,b)=>{\r\n        if(b == 'list'){\r\n            var list=[...this.state.list];\r\n            var listDel=list.splice(a,1);\r\n            this.setState({\r\n                list:list\r\n            },()=>{\r\n                localStorage.setItem('key1',JSON.stringify(this.state.list));\r\n                localStorage.setItem('key2',JSON.stringify(this.state.arr));\r\n            })\r\n            return listDel[0];\r\n        }\r\n        else if(b == 'arr'){\r\n            var arr=[...this.state.arr];\r\n            var arrDel=arr.splice(a,1);\r\n            this.setState({\r\n                arr:arr\r\n            },()=>{\r\n                localStorage.setItem('key2',JSON.stringify(this.state.arr))\r\n                localStorage.setItem('key1',JSON.stringify(this.state.list))\r\n            })\r\n            return arrDel[0];\r\n        }\r\n    }\r\n    transfer=(e,c)=>{\r\n        if(c == 'list'){\r\n            var listAdd=this.deleteList(e,c);\r\n            this.setState({\r\n                arr:[...this.state.arr,listAdd]\r\n            })\r\n        }\r\n        else if(c =='arr'){\r\n            var arrAdd=this.deleteList(e,c);\r\n            this.setState({\r\n                list:[...this.state.list,arrAdd]\r\n            })\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <TodoInput add={this.addList}/>\r\n                <ToDoing number={this.state.num} trans={this.transfer} del={this.deleteList} list={this.state.list} arr={this.state.arr}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React,{Component,Fragment} from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n//import ShowTime from './ShowTime';////(ShowTime.js)默认导出直接写名ShowTime\n//import {ShowTime} from './ShowTime';//命名导出需写花括号{ShowTime}\n\nimport Todolist from './Todolist/Todolist';\n\nimport Request from './Request';\n\nimport Parent from './Context/Parent';\n\nimport Hoc from './Hoc/Hoc';\n\nimport TodoList from './Project01/TodoList';\n\n//组件交互\n//父组件-->子组件：调用时在子组件上添加属性\n//在子组件\n\n// RactDOM.render(<Hello word='react'/>,document.getElementById('root'));\n\n// ReactDOM.render(<ShowTime word='react'/>,document.getElementById('root'));\n\n// ReactDOM.render(<Todolist/>,document.getElementById('root'));\n\nReactDOM.render(<TodoList/>,document.getElementById('root'));\n\n\n//ReactDOM.render(<Request/>,document.getElementById('root'));\n\n//实现组件交互不用一层层传值\n//let {Provider,Consumer}=React.createContext();\n//import {Provider} from './Context/Context'\n//import {con} from './Context/Context'\n//import Portals from './Portal/Portals';\n//import ParentPortal from './Portal/ParentPortal';\n\n//import APP from './APP';\n\n// let color='red';\n// ReactDOM.render(\n//     <Provider value={color}>\n//         <Parent/>\n//     </Provider>,\n//     document.getElementById('root'));\n\n// ReactDOM.render(\n//     <con.Provider value={color}>\n//         <Parent/>\n//     </con.Provider>,\n//     document.getElementById('root'));\n\n// ReactDOM.render(\n//     <con.Provider value={color}>\n//         <Hoc/>\n//     </con.Provider>,\n//     document.getElementById('root'));\n\n// ReactDOM.render(\n//     <con.Provider value={color}>\n//         <ParentPortal/>\n//     </con.Provider>,\n//     document.getElementById('root'));\n\n//渲染APP 路由\n// ReactDOM.render(\n//         <APP/>,\n//         document.getElementById('root'));\n\n\n\n// 函数定义组件(无生命周期函数)\n//当只是渲染结构时\n// function Todo(props){\n//     return (\n//         <div>\n//             <h1>todo</h1>\n//             <ul>\n//                 {/* 循环渲染 */}\n//                 {\n//                     props.list.map(function(item,index){\n//                         return <li key={item}>{item}</li>\n//                     })\n//                 }\n//             </ul>\n//         </div>\n//     )\n// }\n// function Todo(props){\n//     return (\n//         <div>\n//             {/* 条件渲染 */}\n//             {props.list.length>=6?<h1>todo</h1>:''}\n//             {props.list.length>=5 && <h1>todo</h1>}\n//             <ul>\n//                 {/* 循环渲染 */}\n//                 {\n//                     props.list.map(\n//                         (item,index)=> index%2 === 0&&<li key={item}>{item}</li>\n//                     )\n//                 }\n//             </ul>\n//         </div>\n//     )\n// }\n// var item = [1,2,3,4,5];\n// ReactDOM.render(<Todo list={item}/>,document.getElementById('root'));\n\n// react元素创建后不可改变\n// function tick(){\n//     var e = <div>\n//                 <p>当前时间</p>\n//                 <p>当前时间</p>\n//                 <h1>{new Date().toLocaleString()}</h1>;\n//             </div>\n//     ReactDOM.render(e,document.getElementById('root'));\n// }\n// tick();\n// setInterval(tick,1000);\n\n//类定义组件\n// class Hello extends Component{\n//     constructor(props){\n//         super(props);\n//         this.state={\n//             // str:'12345'\n//             time:new Date().toLocaleString()\n//         }\n//         // setInterval(()=>{\n//         //     this.setState({\n//         //        time:new Date().toLocaleString()\n//         //     })\n//         // },1000)\n//         console.log('constructor',this.props.word)\n\n//     }\n//     componentDidMount(){\n//         console.log('componentDidMount');\n//         setTimeout(()=>{\n//             console.log(1)\n//             this.setState({\n//                 time:new Date().toLocaleString()\n//             })\n//         },1000)\n//     }\n\n//     //加一步判断\n//     shouldComponentUpdate(){\n//         return true//false 定时器不更新\n//     }\n//     getSnapshotBeforeUpdate(){\n//         console.log('getsnapshot');\n//         return null\n//     }\n//     componentDidUpdate(){\n//         console.log('didupdate');\n//     }\n//     render(){\n//         console.log('render');\n//         // setInterval(()=>{\n//         //     console.log(1)\n//         //     this.setState({\n//         //         time:new Date().toLocaleString()\n//         //     })\n//         // },1000)\n//         //每次setstate就render一次\n//         //挪到这也可以\n//         return (\n//             <Fragment>\n//                 {/* <div>{this.state.str}</div> */}\n//                 <div>{this.state.time}</div>\n//                 <div>hello{this.props.word}</div>\n//             </Fragment>\n//             //return只能返回一个\n//         )\n//     }\n// }\n// ReactDOM.render(<Hello word='react'/>,document.getElementById('root'));\n\n//jsx表达式会被react转换成改一个对象\n// var ele=React.createElement(\n//     'div',\n//     {id:'box'},\n//     'hello',\n//     React.createElement(\n//         'h1',\n//         {id:'h'},\n//         'react'\n//     )\n// );\n// console.log(ele);\n\n// var obj={\n//     type:'h1',\n//     props:{          //div的结点\n//         id:'box',\n//         class:'box',\n//         children:['hello',{\n//             type:'h1',\n//             props:{\n//                 id:'box',\n//                 class:'box',\n//                 children:['react']\n//             }\n//         }]\n//     }\n// }\n// function render(obj,container){\n//     var {type,props}=obj;\n//     //var ele=document.createElement(obj.type);\n//     var ele=document.createElement(type);\n//     // ele.id=obj.props.id;\n//     // ele.innerHTML=obj.props.children[0];\n//     for(var item in props){\n//         if(item ==='class'){\n//             ele.className=props[item];\n//         }\n//         else if(item === 'children'){\n//             for(var i=0;i<props[item].length;i++){\n//                 var txt=document.createTextNode(props[item][i]);\n//                 ele.appendChild(txt);\n//             }\n//         }\n//         else{\n//             ele[item] =props[item];\n//         }\n//     }\n//     container.appendChild(ele);\n// }\n\n// 加载html文件、浏览器解析html生成DOM树\n// link加载css文件，解析css规则、和DOM树结合生成render tree（渲染树）、浏览器渲染引擎渲染render tree\n\n//页面回流(重排):内容改变，大小改变，结构改变（页面重新渲染一遍）（需要尽量减少页面的回流）\n//页面重绘:把字体颜色、背景颜色等样式改变\n\n//1、 node.offsetLeft、node.offserWidth等慎用//每次获取最新值页面都会回流一次\n\n//2、\n// var root=document.getElementById('root');\n// var width=root.offsetWidth;\n// setInterval(function(){\n//     width+=1;//减少了回流\n//     root.style.width=width+'px';//width取最终值\n// },100)\n\n// 3、display、width、height、font-size等会引起页面回流\n// document.body.style.width='100px';\n// document.body.style.height='100px';//每赋值一次，页面回流一次\n// 声明一个css的一个类\n// .change{\n//     width:100px;\n//     height:100px;\n// }\n// document.body.className='change';\n\n\n// console.time('a');\n// //页面回流一次\n// var str='';\n// for(var i=0;i<1000;i++){\n//     str+=\"<li>\"+i+\"</li>\";\n// }\n// document.body.innerHTML=str;\n\n//页面回流多次\n// for(var i=0;i<1000;i++){\n//     document.body.innerHTML+=\"<li>\"+i+\"</li>\";\n// }\n// console.timeEnd('a');\n\n// var str='<h1>hello</h1>'+'';\n// ele.innerHTML=str;\n\n\n// function render(obj,container){\n//     var {type,props}=obj;\n//     //文档碎片\n//     var fr=document.createDocumentFragment();\n//     //var ele=document.createElement(obj.type);\n//     var ele=document.createElement(type);\n//     // ele.id=obj.props.id;\n//     // ele.innerHTML=obj.props.children[0];\n//     for(var item in props){\n//         if(item ==='class'){\n//             ele.className=props[item];\n//         }\n//         else if(item === 'children'){\n//             for(var i=0;i<props[item].length;i++){\n//                 if(typeof props[item][i] ==='object'){\n//                     render(props[item][i],ele);\n//                 }\n//                 else{\n//                     var txt=document.createTextNode(props[item][i]);\n//                     ele.appendChild(txt);\n//                 }\n//             }\n//         }\n//         else{\n//             ele[item] =props[item];\n//         }\n//     }\n//     fr.appendChild(ele);\n//     container.appendChild(fr);\n// }\n\n//render(obj, document.getElementById('root'));\n\n//var e=<h1>hello</h1>;\n// ReactDOM.render(ele, document.getElementById('root'));\n\n\n"],"sourceRoot":""}